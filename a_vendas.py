# -*- coding: utf-8 -*-
"""a_vendas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/CleidisonWCley/33929c0a6c63eecf56279f4fefe6d9aa/a_vendas.ipynb
"""



"""# **An√°lise de Vendas com Pandas**

## **Dataset:**


*   Cliente

*   Produto

*   Categoria

*   Valor

*   Data


## **M√©todos:**


*   Leitura com pandas.read_csv
*   Convers√£o de datas com pd.to_datetime

*   Agrupamento de dados com groupby
*   Visualiza√ß√£o com matplotlib.pyplot

## **Prints:**

*   df.head() ‚Üí mostra as primeiras linhas
*   df.info() ‚Üí mostra tipo de dados e colunas
"""

!pip install faker

from faker import Faker
import random
import pandas as pd

fake = Faker ("Pt_BR")

categorias = ["Eletronicos", "Roupas" , "Alimentos" , "Livros","Beleza", "JOGOS" ]
produtos = {
    "Eletronicos" :  ["Smartphone" ,"Notebook", "Fone de ouvido", "TV", "PCGAMER"],
    "Roupas" : ["Camisa", "Cal√ßa", "Jaqueta", "Vestido", "Saia"],
    "Alimentos" : ["Arroz", "Feij√£o", "Macarr√£o", "Leite", "Ovos"],
    "Livros" : ["Romance", "Fic√ß√£o cient√≠fica", "Terror", "Aventura", "Suspense"],
    "Beleza" : ["Perfume", "Creme", "Sabonete", "Shampoo", "B√≥mb√≥m"],
    "JOGOS" : ["Guardian Tales", "Genshin Impact", "Roblox", "GTA V" , "Minecraft"]
}

dados = []
for _ in range(1000): #Numero de linhas
  categoria = random.choice(categorias)
  produto = random.choice(produtos[categoria])
  cliente = fake.first_name()
  valor = round(random.uniform(10, 2000), 2)
  data = fake.date_between (start_date= "-1y", end_date="today")
  dados.append([cliente, produto, categoria, valor, data])

dp = pd.DataFrame(dados, columns=["Cliente", "Produto", "Categoria", "Valor", "Data"])
dp.to_csv("dados_fakes.csv", index=False, encoding="utf-8")

print("Arquivo vendas.csv gerado com sucesso!")
print(dp.head())

"""### **Resultados:**"""

# Bibliotecas
import pandas as pd
import matplotlib.pyplot as plt

# Configura√ß√µes de exibi√ß√£o
pd.set_option('display.float_format', 'R${:,.2f}'.format)

# L√™ o arquivo CSV
df = pd.read_csv("dados_fakes.csv")

# Converte coluna de data para datetime
df["Data"] = pd.to_datetime(df["Data"])
df["Mes"] = df["Data"].dt.to_period("M")

# Mostra primeiras linhas
print("üîç Primeiras linhas do dataset:")
print(df.head())

# Informa√ß√µes gerais
print("\n‚ÑπÔ∏è Informa√ß√µes do DataFrame:")
print(df.info())

# 1. Qual cliente gastou mais no per√≠odo?
cliente_top = df.groupby("Cliente")["Valor"].sum().sort_values(ascending=False)
print("\n1Ô∏è‚É£ Cliente que mais gastou no per√≠odo:")
print(cliente_top.head(1))

cliente_top.head(10).plot(kind="bar", title="Top 10 Clientes por Gastos", ylabel="Valor (R$)", figsize=(10, 5))
plt.tight_layout()
plt.show()

# 2. Categoria que mais fatura
categoria_faturamento = df.groupby("Categoria")["Valor"].sum().sort_values(ascending=False)
print("\n2Ô∏è‚É£ Categoria com maior faturamento:")
print(categoria_faturamento)

categoria_faturamento.plot(kind="bar", title="Faturamento por Categoria", ylabel="Valor (R$)", color="skyblue")
plt.tight_layout()
plt.show()

# 3. Produto mais vendido (por n√∫mero de vendas)
produto_mais_vendido = df["Produto"].value_counts().head(1)
print("\n3Ô∏è‚É£ Produto mais vendido (em n√∫mero de vendas):")
print(produto_mais_vendido)

df["Produto"].value_counts().head(10).plot(kind="bar", title="Top 10 Produtos Mais Vendidos", color="orange")
plt.tight_layout()
plt.show()

# 4. Existe sazonalidade nas vendas?
vendas_por_mes = df.groupby("Mes")["Valor"].sum()
print("\n4Ô∏è‚É£ Faturamento por m√™s:")
print(vendas_por_mes)

vendas_por_mes.plot(kind="line", title="Faturamento Mensal", marker="o", figsize=(10, 5))
plt.ylabel("Valor (R$)")
plt.grid(True)
plt.tight_layout()
plt.show()

# 5. Cliente que mais comprou em valor total (igual ao cliente que mais gastou)
print("\n5Ô∏è‚É£ Cliente com maior valor total de compras:")
print(cliente_top.head(1))

# 6. Quantas vendas por m√™s (gr√°fico de barras)
vendas_por_mes_qtd = df["Mes"].value_counts().sort_index()
print("\n6Ô∏è‚É£ Quantidade de vendas por m√™s:")
print(vendas_por_mes_qtd)

vendas_por_mes_qtd.plot(kind="bar", title="Quantidade de Vendas por M√™s", color="green", figsize=(10, 5))
plt.ylabel("N√∫mero de Vendas")
plt.tight_layout()
plt.show()

# 7. Gr√°fico adicional (livre escolha): Faturamento por produto
faturamento_produto = df.groupby("Produto")["Valor"].sum().sort_values(ascending=False).head(10)
faturamento_produto.plot(kind="barh", title="Top 10 Produtos por Faturamento", color="purple")
plt.xlabel("Valor (R$)")
plt.tight_layout()
plt.show()

"""## **Limita√ß√µes:**

- Os dados s√£o simulados, portanto n√£o representam uma empresa real.

- N√£o h√° coluna de quantidade vendida, dificultando an√°lises de volume.

- N√£o √© poss√≠vel calcular lucro, pois n√£o h√° custo de produto.

- Produtos e categorias foram definidos de forma aleat√≥ria, sem padr√£o de mercado.
"""

# Exibe informa√ß√µes estruturais do DataFrame
print("‚ÑπÔ∏è Informa√ß√µes do DataFrame:")
print(df.info())

print("üìä Estat√≠sticas descritivas (df.describe()):")
print(df.describe())

faturamento_categoria = df.groupby("Categoria")["Valor"].sum().sort_values(ascending=False)

print("üí∞ Faturamento total por categoria:")
print(faturamento_categoria)

vendas_por_mes = df.groupby("Mes").size()

print("üìÖ Quantidade total de vendas por m√™s:")
print(vendas_por_mes)

import matplotlib.pyplot as plt

# Filtrar apenas vendas da categoria "JOGOS"
df_jogos = df[df["Categoria"] == "JOGOS"]

# Contar quantas vezes cada jogo foi vendido
jogos_mais_vendidos = df_jogos["Produto"].value_counts()

# Plotar o gr√°fico de barras
plt.figure(figsize=(8, 5))
jogos_mais_vendidos.plot(kind='bar', color='royalblue')
plt.title("üéÆ Jogos mais vendidos (Categoria: JOGOS)", fontsize=14)
plt.xlabel("Jogo")
plt.ylabel("Quantidade de Vendas")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Filtrar vendas da categoria "Eletronicos"
df_eletronicos = df[df["Categoria"] == "Eletronicos"]

# Agrupar por produto e somar o valor total das vendas
faturamento_eletronicos = df_eletronicos.groupby("Produto")["Valor"].sum().sort_values(ascending=False)

# Plotar gr√°fico de barras
plt.figure(figsize=(8,5))
faturamento_eletronicos.plot(kind='bar', color='darkorange')
plt.title("üíª Faturamento por Produto - Categoria Eletronicos", fontsize=14)
plt.xlabel("Produto")
plt.ylabel("Faturamento Total (R$)")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Filtrar vendas da categoria "Roupas"
df_roupas = df[df["Categoria"] == "Roupas"]

# Agrupar por produto e somar o valor total das vendas
faturamento_roupas = df_roupas.groupby("Produto")["Valor"].sum().sort_values(ascending=False)

# Plotar gr√°fico de barras
plt.figure(figsize=(8,5))
faturamento_roupas.plot(kind='bar', color='mediumseagreen')
plt.title("üëó Faturamento por Produto - Categoria Roupas", fontsize=14)
plt.xlabel("Produto")
plt.ylabel("Faturamento Total (R$)")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()